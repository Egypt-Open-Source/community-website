[{"content":"Intro CodeRunner.nvim is a versatile Neovim plugin designed to streamline the process of executing code directly within the Neovim environment. This document provides a comprehensive guide on installing, configuring, and contributing to CodeRunner.nvim.\nInstallation Lazy.nvim -- lazy.nvim setup use \u0026#34;Coptan99/CodeRunner.nvim\u0026#34; Packer.nvim -- packer.nvim setup use \u0026#34;Coptan99/CodeRunner.nvim\u0026#34; vim-plug \u0026#34; vim-plug setupPlug \u0026#34;Coptan99/CodeRunner.nvim\u0026#34;Supported Files CodeRunner.nvim currently supports the following file types:\n C C++ Python  Usage To execute the code in the active file, simply use the following command:\n:lua require(\u0026#34;coderunner\u0026#34;).runner()Keymapping For convenient access to the CodeRunner functionality, consider adding a key mapping to your Neovim configuration. Open your init.vim or init.lua and append the following:\nExample Keymapping -- Example key mapping in init.lua vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;qq\u0026#34;, \u0026#34;:lua require(\u0026#39;coderunner\u0026#39;).runner()\u0026#34;) Feel free to customize the key mapping according to your preferences.\nConfiguration CodeRunner.nvim is designed to be easily configurable. To tailor it to your specific needs, modify the key mapping in the provided configuration. Refer to the example key mapping above and adjust it accordingly.\nContribution Contributions to CodeRunner.nvim are highly encouraged. If you have new ideas, enhancements, or bug fixes, feel free to submit a pull request. As the project evolves, your contributions play a crucial role in improving the functionality and user experience of CodeRunner.nvim.\nPlease note that all contributions should adhere to the project\u0026rsquo;s guidelines, and constructive feedback is always welcome. Whether you\u0026rsquo;re a seasoned developer or a beginner, your input is valued as we work together to enhance CodeRunner.nvim.\nThank you for considering CodeRunner.nvim, and happy coding!CodeRunner.nvim Documentation*\nCodeRunner.nvim is a versatile Neovim plugin designed to streamline the process of executing code directly within the Neovim environment. This document provides a comprehensive guide on installing, configuring, and contributing to CodeRunner.nvim.\nInstallation Lazy.nvim -- lazy.nvim setup use \u0026#34;Coptan99/CodeRunner.nvim\u0026#34; Packer.nvim -- packer.nvim setup use \u0026#34;Coptan99/CodeRunner.nvim\u0026#34; vim-plug \u0026#34; vim-plug setupPlug \u0026#34;Coptan99/CodeRunner.nvim\u0026#34;Supported Files CodeRunner.nvim currently supports the following file types:\n C C++ Python  Usage To execute the code in the active file, simply use the following command:\n:lua require(\u0026#34;coderunner\u0026#34;).runner()Keymapping For convenient access to the CodeRunner functionality, consider adding a key mapping to your Neovim configuration. Open your init.vim or init.lua and append the following:\nExample Keymapping -- Example key mapping in init.lua vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;qq\u0026#34;, \u0026#34;:lua require(\u0026#39;coderunner\u0026#39;).runner()\u0026#34;) Feel free to customize the key mapping according to your preferences.\nConfiguration CodeRunner.nvim is designed to be easily configurable. To tailor it to your specific needs, modify the key mapping in the provided configuration. Refer to the example key mapping above and adjust it accordingly.\nContribution Contributions to CodeRunner.nvim are highly encouraged. If you have new ideas, enhancements, or bug fixes, feel free to submit a pull request. As the project evolves, your contributions play a crucial role in improving the functionality and user experience of CodeRunner.nvim.\nPlease note that all contributions should adhere to the project\u0026rsquo;s guidelines, and constructive feedback is always welcome. Whether you\u0026rsquo;re a seasoned developer or a beginner, your input is valued as we work together to enhance CodeRunner.nvim.\nThank you for considering CodeRunner.nvim, and happy coding!\n","date":"2023-12-09T00:00:00Z","image":"/post/coderunner/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"/post/coderunner/","title":"Code Runner"},{"content":"WebGetter WebGetter is an open-source tool developed by Team Egypt Open Source that allows you to quickly obtain the source code of any website. This tool is designed for ease of use on any Linux system or Termux. Feel free to contribute and support us by buying a coffee.\nTable of Contents  Requirements Installation Usage About  Requirements Before using WebGetter, make sure you have the following:\n Any Linux system terminal or Termux.  Installation  Install wget:  sudo apt install wget Clone the tool:  curl https://raw.githubusercontent.com/Egypt-Open-Source/WebGetter/main/web_getter.sh \u0026gt;\u0026gt; web_getter.sh Give the tool permissions:  chmod +x web_getter.sh Open the tool:  ./web_getter.sh Usage Once the tool is open, follow these steps:\n  Choose your desired option:\n Option 1: Get basic website source code without additional links, videos, or audio. Option 2: Get all website source code, including HTML, CSS, JS files, and linked websites. Also, retrieves audio and videos.    When adding a website link, ensure it starts with \u0026ldquo;http/https\u0026rdquo; and includes \u0026ldquo;www\u0026rdquo; (except for GitHub Pages source code, where \u0026ldquo;www\u0026rdquo; is not needed).\n  After entering the link and pressing Enter, the tool will save the source code in a folder named after the website.\n  About WebGetter is a free open-source tool developed by Team Egypt Open Source. It allows you to obtain any website\u0026rsquo;s source code in just a few minutes.\nLicense This project is licensed under the MIT License.\n","date":"2023-12-11T00:00:00Z","image":"/post/webgetter/cover_hu284c579b239bd0e076a6f93d04444fd1_466811_120x120_fill_q75_box_smart1.jpg","permalink":"/post/webgetter/","title":"Web Getter"},{"content":"Joke-Machine Joke-Machine is a compact embedded system project designed to fetch and display jokes using APIs. This project utilizes ESP32, the Wokwi simulator, and an API-based mechanism to deliver humor at your fingertips.\nTable of Contents  Introduction Components Getting Started Usage Contributing License  Introduction Joke-Machine is a small-scale embedded system project that brings entertainment to your ESP32-based devices. By leveraging the Wokwi simulator and integrating API calls, this project fetches jokes and prints them on your connected device.\nComponents  ESP32: The project is built on the ESP32 microcontroller, providing the necessary hardware foundation. Wokwi Simulator: Wokwi is used as a simulation environment, allowing you to test and visualize the project\u0026rsquo;s functionality. API-Based Joke Machine: The project relies on an external API to fetch jokes and deliver them to the ESP32 for display.  Getting Started To set up the Joke-Machine project, follow these steps:\n  Clone the repository:\ngit clone https://github.com/your-username/Joke-Machine.git   Open the project in your preferred development environment.\n  Install any necessary dependencies or libraries.\n  Connect your ESP32 board to your development environment.\n  Usage Once the setup is complete, upload the project to your ESP32 device. The Joke-Machine will then connect to the specified API, fetch a joke, and display it on the device. Enjoy the laughter!\nContributing Contributions are welcome! If you\u0026rsquo;d like to enhance the Joke-Machine project, follow these steps:\n  Fork the repository.\n  Create a new branch for your feature or bug fix:\ngit checkout -b feature/your-feature-name   Make your changes and commit them:\ngit commit -m \u0026#39;Add your feature or fix\u0026#39;   Push to the branch:\ngit push origin feature/your-feature-name   Open a pull request with a detailed description of your changes.\n  License This project is licensed under the MIT License.\n","date":"2023-12-11T00:00:00Z","image":"/post/jokemachine/cover_hu3dded3d4422fc761db125302ca9aea30_73695_120x120_fill_box_smart1_3.png","permalink":"/post/jokemachine/","title":"Joke Machine"}]